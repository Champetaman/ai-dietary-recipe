"use client";

import React, { useState, useCallback } from "react";
import { useChat } from "ai/react"; // Import for AI chat functionality
import TimeSelector from "../components/TimeSelector"; // Component for selecting cooking time
import FoodTypeSelector from "../components/FoodTypeSelector"; // Component for selecting food type
import DietaryRestrictionsSelector from "../components/DietaryRestrictionsSelector"; // Component for selecting dietary restrictions
import ReligiousDietsSelector from "../components/ReligiousDietsSelector"; // Component for selecting religious dietary restrictions
import Image from "next/image"; // Next.js component for optimized image rendering

// Define the type for messages exchanged with the AI
interface Message {
  id: string;
  role: "user" | "assistant";
  content: string;
}

export default function Chat() {
  // Hook to manage chat interactions with AI
  const { error, messages, isLoading, setInput, handleSubmit, reload, stop } = useChat({
    keepLastMessageOnError: true, // Option to retain the last message if an error occurs
  });

  // State variables to hold user selections
  const [selectedTime, setSelectedTime] = useState<string | null>(null);
  const [selectedFoodType, setSelectedFoodType] = useState<string | null>(null);
  const [selectedDietaryRestrictions, setSelectedDietaryRestrictions] = useState<string[]>([]);
  const [selectedReligiousDiets, setSelectedReligiousDiets] = useState<string[]>([]);
  const [recipeImage, setRecipeImage] = useState<string | null>(null); // State to hold generated recipe image URL
  const [isImageLoading, setIsImageLoading] = useState<boolean>(false); // State to manage image loading indicator

  // Function to validate user selections
  const validateSelections = useCallback(() => {
    // Ensure a cooking time and food type are selected
    if (!selectedTime || !selectedFoodType) {
      alert("Por favor selecciona al menos un tiempo estimado y la comida que te gustaría comer.");
      return false;
    }

    // Ensure mutually exclusive options are not selected
    if (
      (selectedDietaryRestrictions.includes("Ninguna") && selectedDietaryRestrictions.length > 1) ||
      (selectedReligiousDiets.includes("Ninguna") && selectedReligiousDiets.length > 1)
    ) {
      alert('No puedes seleccionar la opción: "Ninguna" con otras restricciones dietéticas o dietas religiosas.');
      return false;
    }

    return true;
  }, [selectedTime, selectedFoodType, selectedDietaryRestrictions, selectedReligiousDiets]);

  // Function to handle recipe suggestion submission
  const onSubmit = useCallback(async () => {
    // Validate selections before proceeding
    const isValid = validateSelections();
    if (!isValid) {
      return; // Exit if validation fails
    }

    // Create a prompt for the AI based on user selections
    const prompt = `Sugiera una receta con los siguientes criterios:
      1. **Tiempo:** ${selectedTime},
      2. **Tipo de comida:** ${selectedFoodType},
      ${
        selectedDietaryRestrictions.length > 0
          ? `3. **Restricción alimentaria:** ${selectedDietaryRestrictions.join(", ")},`
          : ""
      }
      ${
        selectedReligiousDiets.length > 0
          ? `4. **Restricción religiosa:** ${selectedReligiousDiets.join(", ")},`
          : ""
      }
      Por favor, proporcione una receta única que no haya generado anteriormente, que se ajuste a los criterios mencionados anteriormente. Incluya lo siguiente en su respuesta:
      - **Nombre de la receta**
      - **Lista de ingredientes**
      - **Instrucciones paso a paso detalladas**
      - **Preparación y tiempo de cocción**
      
      Asegurese de que la receta es clara, los ingredientes están en medición imperial y que sea fácil de seguir. Gracias!`;

    // Set the input for the AI and submit the request
    setInput(prompt);
    await handleSubmit(); // Trigger API call
  }, [
    setInput,
    handleSubmit,
    validateSelections,
    selectedTime,
    selectedFoodType,
    selectedDietaryRestrictions,
    selectedReligiousDiets,
  ]);

  // Function to extract recipe details from AI response
  const extractRecipeDetails = (content: string) => {
    // Use regex to extract the recipe name and ingredients from the content
    const nameMatch = content.match(/(Nombre de la receta|Receta):\s*(.*)/i);
    const ingredientsMatch = content.match(
      /(Lista de ingredientes|Ingredientes):\s*([\s\S]*?)\n\n/i
    );

    const recipeName = nameMatch ? nameMatch[2].trim() : "Receta desconocida";
    const ingredients = ingredientsMatch ? ingredientsMatch[2].trim() : "";

    return { recipeName, ingredients };
  };

  // Function to generate an image of the dish
  const onGenerateImage = useCallback(async () => {
    // Retrieve the latest recipe generated by the AI
    const recipeMessage = messages.find((m) => m.role === "assistant");

    // Ensure there is a recipe to generate an image for
    if (!recipeMessage) {
      alert("Primero sugiere una receta antes de generar la imagen.");
      return;
    }

    // Extract relevant details from the recipe
    const { recipeName, ingredients } = extractRecipeDetails(recipeMessage.content);

    // Start image loading process
    setIsImageLoading(true);

    try {
      // Make a request to the server to generate an image
      const imageResponse = await fetch("/api/generateImage", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          description: `Create a high-quality image of a dish named: "${recipeName}". 
          The dish should feature the following ingredients:"${ingredients}". 
          The colors should be warm and inviting. 
          The lighting should be natural daylight coming from a nearby window, casting soft shadows.`,
        }),
      });

      if (!imageResponse.ok) {
        throw new Error(`HTTP error! status: ${imageResponse.status}`);
      }

      // Parse the response to get the image URL
      const imageData = await imageResponse.json();
      if (imageData.imageUrl) {
        setRecipeImage(imageData.imageUrl); // Set the image URL in state
      } else {
        console.error("Failed to fetch image:", imageData.message);
      }
    } catch (error) {
      console.error("Error fetching image:", error);
    } finally {
      // Stop the loading process
      setIsImageLoading(false);
    }
  }, [messages]);

  // Function to reset the application state
  const onReset = useCallback(() => {
    // Reset all selections and input fields
    setSelectedTime(null);
    setSelectedFoodType(null);
    setSelectedDietaryRestrictions([]);
    setSelectedReligiousDiets([]);
    setRecipeImage(null);
    setInput("");
    window.location.reload(); // Reload the page
  }, [setInput]);

  return (
    <div className="flex flex-col items-center w-full max-w-2xl py-24 mx-auto">
      <header className="mb-6 text-center">
        <h1 className="text-3xl font-bold">Recetario Inteligente</h1>
      </header>
      <TimeSelector onSelectTime={setSelectedTime} />
      <FoodTypeSelector onSelectFoodType={setSelectedFoodType} />
      <DietaryRestrictionsSelector
        onSelectRestriction={setSelectedDietaryRestrictions}
      />
      <ReligiousDietsSelector onSelectRestriction={setSelectedReligiousDiets} />

      <div className="flex w-full space-x-2 mt-5">
        <button type="button" onClick={onSubmit} className="w-full btn">
          Sugerir Receta
        </button>

        <button type="button" onClick={onGenerateImage} className="w-full btn">
          Generar Imagen
        </button>

        <button type="button" onClick={onReset} className="w-full btn">
          Iniciar Nuevamente
        </button>
      </div>

      {isLoading && (
        <div className="mt-4 text-gray-500">
          <div>Cargando...</div>
          <button
            type="button"
            className="px-4 py-2 mt-4 text-blue-500 border border-blue-500 rounded-md"
            onClick={stop}
          >
            Detener
          </button>
        </div>
      )}

      {error && (
        <div className="mt-4">
          <div className="text-red-500">Un error ha ocurrido.</div>
          <button
            type="button"
            className="px-4 py-2 mt-4 text-blue-500 border border-blue-500 rounded-md"
            onClick={() => reload()}
          >
            Reintentar
          </button>
        </div>
      )}

      {/* Render the loading indicator when image generation is in progress */}
      {isImageLoading && (
        <div className="mt-4 text-gray-500">Generando imagen...</div>
      )}

      <div className="mt-4 p-4 bg-white rounded shadow w-full">
        {messages
          .filter((m) => m.role === "assistant")
          .map((m) => (
            <div key={m.id} className="whitespace-pre-wrap mb-6">
              <p className="text-lg font-medium mb-2">Platillo recomendado:</p>
              <p className="p-4 bg-gray-100 rounded-md">{m.content}</p>
            </div>
          ))}
        {recipeImage &&
          !isImageLoading && ( // Only show the image when not loading
            <div className="mt-4">
              <p className="text-lg font-medium mb-2">Imagen del platillo:</p>
              <Image
                src={recipeImage}
                alt="Generated dish"
                width={512}
                height={512}
                className="w-full rounded-md"
              />
            </div>
          )}
      </div>

      <footer className="mt-12 text-center text-gray-500">
        © {new Date().getFullYear()}{" "}
        <a href="https://www.camilooviedo.com/" className="hover:underline">
          Camilo Oviedo
        </a>
        . Almost all Rights Reserved.
      </footer>
    </div>
  );
}
